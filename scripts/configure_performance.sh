#!/bin/bash

###############################################################################
# Performance Configuration Script
# 
# This script handles boot configuration, overclocking, and performance tuning
# Part of the modular RaspiCommandCenter setup
#
# Author: RaspiCommandCenter
# Version: 1.0.0
###############################################################################

set -euo pipefail

# Source utility functions
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "${SCRIPT_DIR}/../utils/logging.sh"
source "${SCRIPT_DIR}/../utils/common.sh"

# Configuration file paths
BOOT_CONFIG="/boot/config.txt"
BOOT_CONFIG_FIRMWARE="/boot/firmware/config.txt"

###############################################################################
# Boot Configuration Functions
###############################################################################

detect_boot_config_path() {
    log_info "Detecting boot configuration file location..." >&2
    
    if [[ -f "$BOOT_CONFIG_FIRMWARE" ]]; then
        log_info "Using Ubuntu-style boot config: $BOOT_CONFIG_FIRMWARE" >&2
        echo "$BOOT_CONFIG_FIRMWARE"
    elif [[ -f "$BOOT_CONFIG" ]]; then
        log_info "Using Raspberry Pi OS boot config: $BOOT_CONFIG" >&2
        echo "$BOOT_CONFIG"
    else
        log_error "Boot configuration file not found!" >&2
        exit 1
    fi
}

backup_boot_config() {
    local config_file="$1"
    local backup_file="${config_file}.backup-$(date +%Y%m%d_%H%M%S)"
    
    log_info "Creating backup of boot configuration..."
    cp "$config_file" "$backup_file"
    log_success "Backup created: $backup_file"
}

configure_boot_settings() {
    log_info "Configuring boot and performance settings..."
    
    local config_file
    config_file=$(detect_boot_config_path)
    
    # Create backup
    backup_boot_config "$config_file"
    
    # Remove any existing RaspiCommandCenter configuration
    sed -i '/# RaspiCommandCenter Configuration/,/# End RaspiCommandCenter Configuration/d' "$config_file"
    
    # Add our configuration block
    cat >> "$config_file" << 'EOF'

# RaspiCommandCenter Configuration
# Generated by RaspiCommandCenter Performance Script
# Using Jeff Geerling's reliable NVME boot method
# Reference: https://www.jeffgeerling.com/blog/2023/nvme-ssd-boot-raspberry-pi-5

# NVME/PCIe Configuration (Jeff Geerling method)
# Enable PCIe x1 slot for NVME SSDs
dtparam=pciex1

# Optional: Control PCIe lane speed (uncomment if needed)
# dtparam=pciex1_gen=3

# Audio Configuration
dtparam=audio=on

# Performance Settings (Aggressive but Stable)
# CPU frequency boost - 3GHz as requested
arm_freq=3000
arm_freq_min=1800
gpu_freq=1000

# Voltage support for 3GHz CPU (moderate, not extreme)
over_voltage=2

# Maximum memory allocation for GPU as requested (Pi 5 can handle more)
gpu_mem=512

# Enable hardware interfaces
dtparam=spi=on
dtparam=i2c_arm=on

# End RaspiCommandCenter Configuration
EOF
    
    log_success "Boot configuration updated with performance settings"
}

###############################################################################
# NVME and Storage Configuration
###############################################################################

configure_nvme_boot() {
    log_info "Configuring NVME boot priority (Jeff Geerling method)..."
    
    # First check if rpi-eeprom-config is available
    if ! command -v rpi-eeprom-config &> /dev/null; then
        log_warn "rpi-eeprom-config not available. Install rpi-eeprom package first."
        return 1
    fi
    
    # Read current EEPROM configuration
    local current_config=$(rpi-eeprom-config 2>/dev/null)
    
    if [[ -z "$current_config" ]]; then
        log_warn "Could not read EEPROM configuration"
        return 1
    fi
    
    # Check if BOOT_ORDER is already configured for NVME
    if echo "$current_config" | grep -q "BOOT_ORDER=0xf416"; then
        log_info "NVME boot order already configured"
    else
        log_info "Updating EEPROM boot order to prioritize NVME (0xf416)..."
        
        # Create temporary config file
        local temp_config=$(mktemp)
        echo "$current_config" > "$temp_config"
        
        # Update or add BOOT_ORDER
        if grep -q "^BOOT_ORDER=" "$temp_config"; then
            sed -i 's/^BOOT_ORDER=.*/BOOT_ORDER=0xf416/' "$temp_config"
        else
            echo "BOOT_ORDER=0xf416" >> "$temp_config"
        fi
        
        # Add PCIE_PROBE for non-HAT+ adapters
        if ! grep -q "^PCIE_PROBE=" "$temp_config"; then
            echo "PCIE_PROBE=1" >> "$temp_config"
        fi
        
        # Apply the configuration
        if rpi-eeprom-config --apply "$temp_config"; then
            log_success "EEPROM configuration updated for NVME boot priority"
            log_info "Boot order: 0xf416 (NVME first, then SD card, then USB, then network)"
            log_info "PCIE_PROBE=1 (for non-HAT+ NVME adapters)"
        else
            log_error "Failed to update EEPROM configuration"
            rm -f "$temp_config"
            return 1
        fi
        
        rm -f "$temp_config"
    fi
    
    log_info "NVME boot configuration completed"
}

configure_storage_optimization() {
    log_info "Configuring storage optimizations..."
    
    # Enable TRIM support for SSDs
    log_info "Enabling TRIM support for NVME SSDs..."
    if ! grep -q "fstrim" /etc/crontab 2>/dev/null; then
        echo "0 2 * * 0 root /sbin/fstrim -av" >> /etc/crontab
        log_success "Weekly TRIM scheduled via cron"
    else
        log_info "TRIM already configured"
    fi
    
    # Optimize I/O scheduler for SSDs
    log_info "Optimizing I/O scheduler for NVME..."
    cat > /etc/udev/rules.d/60-nvme-scheduler.rules << 'EOF'
# Set I/O scheduler for NVME devices to none (for SSDs)
ACTION=="add|change", KERNEL=="nvme[0-9]*", ATTR{queue/scheduler}="none"
EOF
    
    log_success "I/O scheduler optimization configured"
}

###############################################################################
# Memory and Swap Configuration
###############################################################################

configure_memory_settings() {
    log_info "Configuring memory and swap settings..."
    
    # Optimize swap settings for SSD
    cat > /etc/sysctl.d/99-raspi-performance.conf << 'EOF'
# RaspiCommandCenter Performance Tuning

# Reduce swap usage (good for SSDs)
vm.swappiness=10

# Reduce dirty page writebacks (better for SSDs)
vm.dirty_ratio=15
vm.dirty_background_ratio=5

# Network performance
net.core.rmem_max=16777216
net.core.wmem_max=16777216
net.ipv4.tcp_rmem=4096 16384 16777216
net.ipv4.tcp_wmem=4096 16384 16777216

# File system performance
fs.file-max=65536
EOF
    
    # Configure zram for better memory usage
    if ! systemctl is-enabled zramswap &>/dev/null; then
        log_info "Installing and configuring zram..."
        if apt install -y zram-tools; then
            echo "ALGO=lz4" > /etc/default/zramswap
            echo "PERCENT=25" >> /etc/default/zramswap
            systemctl enable zramswap
            log_success "Zram configured (25% of RAM)"
        else
            log_warn "Failed to install zram-tools"
        fi
    else
        log_info "Zram already configured"
    fi
    
    log_success "Memory and swap optimization completed"
}

###############################################################################
# CPU Governor and Frequency Scaling
###############################################################################

configure_cpu_governor() {
    log_info "Configuring CPU governor for performance..."
    
    # Install cpufrequtils if not present
    if ! command -v cpufreq-set &>/dev/null; then
        log_info "Installing cpufrequtils..."
        apt install -y cpufrequtils
    fi
    
    # Set performance governor
    cat > /etc/default/cpufrequtils << 'EOF'
# RaspiCommandCenter CPU Governor Configuration
GOVERNOR="performance"
MIN_SPEED="1800000"
MAX_SPEED="3000000"
EOF
    
    # Create systemd service to ensure governor is set on boot
    cat > /etc/systemd/system/cpu-performance.service << 'EOF'
[Unit]
Description=Set CPU Governor to Performance
After=multi-user.target

[Service]
Type=oneshot
ExecStart=/bin/bash -c 'echo performance | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor'
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
EOF
    
    systemctl enable cpu-performance.service
    log_success "CPU governor configured for performance"
}

###############################################################################
# GPU and Video Configuration
###############################################################################

configure_gpu_settings() {
    log_info "Configuring GPU and video acceleration..."
    
    # Ensure video group exists and add users
    if getent group video >/dev/null; then
        if [[ -n "${SUDO_USER:-}" ]]; then
            usermod -a -G video "$SUDO_USER"
            log_info "Added $SUDO_USER to video group"
        fi
    fi
    
    # Configure GPU memory split (handled in boot config)
    log_info "GPU memory and acceleration configured via boot config"
    
    # Set up video device permissions
    cat > /etc/udev/rules.d/99-video-permissions.rules << 'EOF'
# Video device permissions for hardware acceleration
SUBSYSTEM=="video4linux", GROUP="video", MODE="0664"
KERNEL=="vchiq", GROUP="video", MODE="0664"
EOF
    
    log_success "GPU and video settings configured"
}

###############################################################################
# Thermal Management
###############################################################################

configure_thermal_management() {
    log_info "Configuring thermal management..."
    
    # Create thermal monitoring script
    cat > /usr/local/bin/thermal-monitor.sh << 'EOF'
#!/bin/bash
# Thermal monitoring script for RaspiCommandCenter

TEMP_FILE="/sys/class/thermal/thermal_zone0/temp"
LOG_FILE="/var/log/thermal.log"

get_temp() {
    if [[ -f "$TEMP_FILE" ]]; then
        local temp_raw=$(cat "$TEMP_FILE")
        echo $((temp_raw / 1000))
    else
        echo "N/A"
    fi
}

get_throttle_status() {
    if command -v vcgencmd >/dev/null 2>&1; then
        vcgencmd get_throttled
    else
        echo "0x0"
    fi
}

# Log current status
CURRENT_TEMP=$(get_temp)
THROTTLE_STATUS=$(get_throttle_status)
echo "$(date): Temp=${CURRENT_TEMP}°C, Throttle=${THROTTLE_STATUS}" >> "$LOG_FILE"

# Alert if temperature is high
if [[ "$CURRENT_TEMP" != "N/A" && "$CURRENT_TEMP" -gt 75 ]]; then
    echo "$(date): WARNING - High temperature: ${CURRENT_TEMP}°C" >> "$LOG_FILE"
fi
EOF
    
    chmod +x /usr/local/bin/thermal-monitor.sh
    
    # Create systemd timer for thermal monitoring
    cat > /etc/systemd/system/thermal-monitor.timer << 'EOF'
[Unit]
Description=Monitor CPU temperature
Requires=thermal-monitor.service

[Timer]
OnCalendar=*:0/5
Persistent=true

[Install]
WantedBy=timers.target
EOF
    
    cat > /etc/systemd/system/thermal-monitor.service << 'EOF'
[Unit]
Description=Monitor CPU temperature

[Service]
Type=oneshot
ExecStart=/usr/local/bin/thermal-monitor.sh
EOF
    
    systemctl enable thermal-monitor.timer
    log_success "Thermal monitoring configured"
}

###############################################################################
# Performance Validation
###############################################################################

validate_performance_settings() {
    log_info "Validating performance settings..."
    
    echo ""
    echo "=== Performance Configuration Summary ==="
    
    # Check if boot config was updated
    local config_file
    config_file=$(detect_boot_config_path)
    if grep -q "RaspiCommandCenter Configuration" "$config_file"; then
        echo "✓ Boot configuration updated"
        echo "  - CPU: 3.0 GHz (3000 MHz)"
        echo "  - GPU: 1.0 GHz (1000 MHz)" 
        echo "  - Over-voltage: 4 (tested stable)"
        echo "  - PCIe Gen 3 enabled"
        echo "  - 4K video acceleration enabled"
    else
        echo "✗ Boot configuration may not be updated"
    fi
    
    # Check thermal limits
    echo "✓ Thermal management configured"
    echo "  - Temperature limit: 80°C"
    echo "  - Soft limit: 70°C"
    echo "  - Monitoring enabled"
    
    # Check memory optimization
    if [[ -f "/etc/sysctl.d/99-raspi-performance.conf" ]]; then
        echo "✓ Memory optimization configured"
    fi
    
    # Check CPU governor
    if [[ -f "/etc/default/cpufrequtils" ]]; then
        echo "✓ CPU governor set to performance"
    fi
    
    echo ""
    echo "=== IMPORTANT ==="
    echo "A REBOOT IS REQUIRED to apply all performance settings!"
    echo "After reboot, the system will run at optimized performance levels."
    echo ""
}

###############################################################################
# Main execution
###############################################################################

main() {
    log_info "=== Performance Configuration Script ==="
    echo ""
    echo "This script will configure:"
    echo "• CPU overclocking to 3.0 GHz"
    echo "• GPU overclocking to 1.0 GHz"  
    echo "• NVME PCIe Gen 3 support"
    echo "• 4K video hardware acceleration"
    echo "• Memory and storage optimizations"
    echo "• Thermal management and monitoring"
    echo ""
    echo "These settings are optimized for Pironman5 cooling."
    echo ""
    
    # Confirmation
    read -p "Continue with performance configuration? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        log_info "Configuration cancelled by user"
        exit 0
    fi
    
    # Execute configuration steps
    log_info "Starting performance configuration..."
    
    configure_boot_settings
    configure_nvme_boot
    configure_storage_optimization
    configure_memory_settings
    configure_cpu_governor
    configure_gpu_settings
    configure_thermal_management
    
    # Validation and summary
    validate_performance_settings
    
    log_success "=== Performance configuration completed! ==="
    echo ""
    echo "Next step: Reboot the system to apply all changes"
    echo "After reboot, run the application installation scripts"
}

# Execute main function if script is run directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
